{"version":3,"sources":["components/Buttons/PostButton.jsx","components/Posts/PostsList/PostsList.jsx","components/Comments/addCommentForm/addCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/Buttons/CommentsButton.jsx","components/Comments/Comment.jsx","components/Comments/CommentsList.jsx","components/Comments/CommentsDetails.jsx","components/Posts/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostButton","changePostId","postId","useState","isClicked","setIsClicked","type","className","onClick","PostsList","posts","length","map","post","key","id","userId","title","AddCommentForm","add","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","BASE_URL","request","apiSection","options","a","fetch","response","ok","Error","status","statusText","json","data","method","usersPosts","getPostDetails","postDetails","getPostComments","comments","filter","comment","addComment","newComment","headers","JSON","stringify","removeComment","commentId","CommentsButton","commentsLength","toggleCommentVisibility","Comment","remove","CommentsList","CommentsDetails","commentsVisibility","setCommentsVisibility","PostDetails","setComments","setPost","removedCommentId","filteredComments","useEffect","getDetails","postFromServer","getComments","commentsFromServer","App","setPosts","setUserId","selectedPostId","setSelectedPostId","getUserPosts","then","userPostsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db08f557.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PostButton = ({ changePostId, postId }) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(0);\n            setIsClicked(false);\n          }}\n        >\n          Close\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList__button button\"\n          onClick={() => {\n            changePostId(postId);\n            setIsClicked(true);\n          }}\n        >\n          Open\n        </button>\n      )}\n    </>\n  );\n};\n\nPostButton.propTypes = {\n  changePostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { PostButton } from '../../Buttons/PostButton';\n\nexport const PostsList = ({ posts, changePostId }) => (\n  <>\n    {!posts.length ? (\n      <h2>Please wait, posts loading</h2>\n    ) : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`User #${post.userId}`}</b>\n                <br />\n                {post.title}\n              </div>\n              <PostButton\n                changePostId={changePostId}\n                postId={post.id}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </>\n);\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  changePostId: PropTypes.func.isRequired,\n};\n","\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './addCommentForm.scss';\n\nexport const AddCommentForm = ({ postId, add }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValueName = (event) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const setValueEmail = (event) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const setValueBody = (event) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const handleSubmitNewComment = (event) => {\n    event.preventDefault();\n\n    add({\n      postId, name, email, body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmitNewComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setValueName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setValueEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setValueBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nAddCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  add: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(apiSection, options) {\n  const response = await fetch(`${BASE_URL}${apiSection}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const posts = await response.json();\n\n  return posts.data;\n}\n\nexport const postRequest = (apiSection, data) => request(apiSection, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const removeRequest = apiSection => request(apiSection, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nconst apiSection = '/posts/';\n\nexport async function getUserPosts(userId) {\n  const usersPosts = await request(apiSection, { method: 'GET' });\n\n  return usersPosts;\n}\n\nexport async function getPostDetails(postId) {\n  const postDetails = await request(\n    `${apiSection}${postId}`, { method: 'GET' },\n  );\n\n  if (!postId) {\n    return null;\n  }\n\n  return postDetails;\n}\n","import { request, postRequest, removeRequest } from './api';\n\nconst apiSection = '/comments/';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request(apiSection);\n\n  if (!postId) {\n    return [];\n  }\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async newComment => postRequest(apiSection, {\n  ...newComment,\n});\n\nexport const removeComment = async commentId => removeRequest(\n  `${apiSection}${commentId}`,\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CommentsButton = ({ commentsLength, toggleCommentVisibility }) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(false);\n            toggleCommentVisibility(false);\n          }}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(true);\n            toggleCommentVisibility(true);\n          }}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      )}\n    </>\n  );\n};\n\nCommentsButton.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  toggleCommentVisibility: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ comment, remove }) => (\n  <li className=\"PostDetails__list-item\">\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => remove(comment.id)}\n    >\n      Delete\n    </button>\n    <p>{comment.body}</p>\n  </li>\n);\n\nComment.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from './Comment';\n\nexport const CommentsList = ({ remove, comments }) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <Comment\n        key={comment.id}\n        comment={comment}\n        remove={remove}\n      />\n    ))}\n  </ul>\n);\n\nCommentsList.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { CommentsButton } from '../Buttons/CommentsButton';\nimport { CommentsList } from './CommentsList';\n\nexport const CommentsDetails = ({ commentsLength, comments, remove }) => {\n  const [commentsVisibility, setCommentsVisibility] = useState(true);\n\n  const toggleCommentVisibility = () => {\n    setCommentsVisibility(!commentsVisibility);\n  };\n\n  return (\n    <section className=\"PostDetails__comments\">\n      <CommentsButton\n        commentsLength={commentsLength}\n        toggleCommentVisibility={toggleCommentVisibility}\n      />\n      {!commentsVisibility && (\n        <CommentsList\n          comments={comments}\n          remove={remove}\n        />\n      )}\n    </section>\n  );\n};\n\nCommentsDetails.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { AddCommentForm } from '../../Comments/addCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../../api/posts';\nimport {\n  getPostComments,\n  addComment,\n  removeComment,\n} from '../../../api/comments';\nimport { CommentsDetails } from '../../Comments/CommentsDetails';\n\nexport const PostDetails = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState(null);\n\n  const add = async(newComment) => {\n    await addComment(newComment);\n\n    setComments([...comments, newComment]);\n  };\n\n  const remove = async(removedCommentId) => {\n    await removeComment(removedCommentId);\n    const filteredComments = comments.filter(\n      comment => removedCommentId !== comment.id,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    const getDetails = async() => {\n      const postFromServer = await getPostDetails(postId);\n\n      setPost(postFromServer);\n    };\n\n    const getComments = async() => {\n      const commentsFromServer = await getPostComments(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  return (\n    <>\n      {!post ? (\n        <h2>Please wait, posts loading</h2>\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {!!comments.length && (\n            <CommentsDetails\n              commentsLength={comments.length}\n              comments={comments}\n              remove={remove}\n            />\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <AddCommentForm\n                postId={postId}\n                add={add}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/Posts/PostsList';\nimport { PostDetails } from './components/Posts/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const changePostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const changeUserId = (event) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        userId !== 0 ? setPosts(userPostsFromServer\n          .filter(post => post.userId === userId))\n          : setPosts(userPostsFromServer);\n      });\n  }, [userId]);\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={changeUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            changePostId={changePostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (<div>Please, choose a post</div>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}